{{>partial_header}}
package {{packageName}}

import (
    "reflect"
	jsonv2 "github.com/go-json-experiment/json"
)

// Nullable is a generic type representing null values.
// By default, zero value in Val means serialization will result in a null value.
// Set ZeroIsValid to true if you want to serialize Val even if set to a zero value.
type Nullable[T any] struct{
	Val T
	ZeroIsValid bool
}

// NewNullable creates a new Nullable with the given value.
// This is useful when you want to create a Nullable with an initial value.
func NewNullable[T any](value T) Nullable[T] {
	return Nullable[T]{Val: value}
}

// IsNull returns true if Val is null
func (n Nullable[T]) IsNull() bool{
	val := reflect.ValueOf(n.Val)
	if !n.ZeroIsValid && val.IsZero() {
		return true
	}
	return false
}

// UnmarshalJSON implements the json.Unmarshaler interface for Nullable, allowing it to be used as a nullable field in JSON operations.
// This method ensures proper unmarshalling of JSON data into the Nullable value, correctly setting the ZeroIsValid flag based on the JSON data.
//
// During Unmarshaling, if we get "null", then the Val is set to zero value and ZeroIsValid is set to false.
// if we get a zero value, then the Val is set to zero value and ZeroIsValid is set to true
// otherwise, Val is set to the passed value and ZeroIsValid is set to false
func (n *Nullable[T]) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.ZeroIsValid = false
		return nil
	}

	var value T
	if err := jsonv2.Unmarshal(data, &value); err != nil {
		return err
	}
	if val := reflect.ValueOf(value); val.IsZero(){
		n.ZeroIsValid = true
	} else {
		n.ZeroIsValid = false
	}
	n.Val = value
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Nullable, enabling it to be used as a nullable field in JSON operations.
// If ZeroIsValid is true, the Nullable field in a struct serializes to the value of Val even if it is a zero value.
// If ZeroIsValid is false, the Nullable field in a struct serializes to "null" if it is a zero value.
func (n Nullable[T]) MarshalJSON() ([]byte, error) {
	val := reflect.ValueOf(n.Val)
	if !n.ZeroIsValid && val.IsZero() {
		return []byte("null"), nil
	}

	return jsonv2.Marshal(n.Val)
}


// Optional is a generic type representing optional values. These are usually the values with ,omitempty in json tags.
// By default, zero value in Val, combined with ,omitzero in json tag will result in Optional field being omitted from JSON
// Set ZeroIsValid to true if you want to serialize Val even if set to a zero value.
// Users of Optional must also include ,omitzero as json tag option. This option results in a call to IsZero method from
// jsonv2 serializer to determine if the field should be serialized.
type Optional[T any] struct{
	Val T
	ZeroIsValid bool
}

// IsZero is always false if ZeroIsValid is set to true or returns true if Val is a zero value
func (o Optional[T]) IsZero() bool {
	return !o.ZeroIsValid || reflect.ValueOf(o.Val).IsZero()
}

// NewOptional creates a new Optional with the given value.
// This is useful when you want to create a Optional with an initial value.
func NewOptional[T any](value T) Optional[T] {
	return Optional[T]{Val: value}
}

// UnmarshalJSON implements the json.Unmarshaler interface for Optional, allowing it to be used as a optional field in JSON operations.
// This method ensures proper unmarshalling of JSON data into the Optional value, correctly setting the ZeroIsValid flag based on the JSON data.
//
// During Unmarshaling, if we get zero value, then the Val is set to that value and ZeroIsValid is set to true.
// if we get non-zero value, then the Val is set to that value and ZeroIsValid is set to false.
func (o *Optional[T]) UnmarshalJSON(data []byte) error {
	var value T
	if err := jsonv2.Unmarshal(data, &value); err != nil {
		return err
	}
	if val := reflect.ValueOf(value); val.IsZero(){
		o.ZeroIsValid = true
	} else {
		o.ZeroIsValid = false
	}
	o.Val = value
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Optional, enabling it to be used as a optional field in JSON operations.
// If ZeroIsValid is false, and Val is zero value, then MarshalJSON will not be called if ",omitzero" is present in the
// struct field json tag options so the json will be omitted similar to ",omitempty" in encoding/json.
// If ZeroIsValid is true, MarshalJSON will be called and will set zero or non-zero value to the field
// If Val is non-zero, MarshalJSON will always be called and return valid json for Val
func (o Optional[T]) MarshalJSON() ([]byte, error) {
	return jsonv2.Marshal(o.Val)
}

// OptionalNullable is a generic type representing optional null values.
// By default, combined with ,omitzero, zero value in Val means no serialization will happen for the field.
// When ZeroIsNull is true, zero value results in a "null".
// When ZeroIsValid is true and ZeroIsNull is false, zero value results in a json for that value.
// Users of OptionalNullable must also include ,omitzero as json tag option. This option results in a call to IsZero method from
// jsonv2 serializer to determine if the field should be serialized.
type OptionalNullable[T any] struct{
	Val T
	ZeroIsValid bool
	ZeroIsNull bool
}

// NewOptionalNullable creates a new NewOptionalNullable with the given value.
// This is useful when you want to create a NewOptionalNullable with an initial value.
func NewOptionalNullable[T any](value T) OptionalNullable[T] {
	return OptionalNullable[T]{Val: value}
}

// IsZero is always false if ZeroIsValid is set to true or returns true if Val is a zero value
func (o OptionalNullable[T]) IsZero() bool {
	return !o.ZeroIsValid || reflect.ValueOf(o.Val).IsZero()
}

// IsNull returns true if Val is null.
func (on OptionalNullable[T]) IsNull() bool{
	val := reflect.ValueOf(on.Val)
	if val.IsZero() {
		if (!on.ZeroIsNull && on.ZeroIsValid){
			return false
		}
		return true
	}
	return false
}

// UnmarshalJSON implements the json.Unmarshaler interface for OptionalNullable, allowing it to be used as an optional nullable field in JSON operations.
// This method ensures proper unmarshalling of JSON data into the OptionalNullable value, correctly setting the ZeroIsValid and ZeroIsNull flags based on the JSON data.
//
// During Unmarshaling, if we get "null", then the Val is set to zero value and ZeroIsValid is set to false and ZeroIsNull is set to true.
// if we get a zero value, then the Val is set to zero value and ZeroIsValid is set to true and ZeroIsNull is set to false.
// otherwise, Val is set to the passed value and, ZeroIsNull and ZeroIsValid are both set to false.
func (on *OptionalNullable[T]) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		on.ZeroIsValid = false
		on.ZeroIsNull = true
		return nil
	}

	var value T
	if err := jsonv2.Unmarshal(data, &value); err != nil {
		return err
	}
	if val := reflect.ValueOf(value); val.IsZero(){
		on.ZeroIsValid = true
	} else {
		on.ZeroIsValid = false
	}
	on.Val = value
	return nil
}

// MarshalJSON implements the json.Marshaler interface for OptionalNullable, enabling it to be used as a nullable field in JSON operations.
// If ZeroIsNull is true, the OptionalNullable field in a struct serializes to the value of Val or null.
// If ZeroIsNull is false and ZeroIsValid is true, the OptionalNullable field in a struct serializes to the value of Val.
// By default, a zero value gets skipped from marshaling if ,omitzero option is used
func (on OptionalNullable[T]) MarshalJSON() ([]byte, error) {
	val := reflect.ValueOf(on.Val)
	if !on.ZeroIsNull && val.IsZero() {
		return []byte("null"), nil
	}

	return jsonv2.Marshal(on.Val)
}

type MappedNullable interface {
	ToMap() (map[string]interface{}, error)
}
