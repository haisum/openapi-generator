{{>partial_header}}
package {{packageName}}


import (
    "reflect"
	jsonv2 "github.com/go-json-experiment/json"
)

// Nullable is a generic struct that holds a nullable value of any type T.
// It keeps track of the value (Val) and a flag (Valid) indicating whether the value has been set.
// This allows for better handling of nullable values, ensuring proper value management and serialization.
type Nullable[T any] struct {
	Val   T
	Valid bool
}

// NewNullable creates a new Nullable with the given value and sets Valid to true.
// This is useful when you want to create a Nullable with an initial value, explicitly marking it as set.
func NewNullable[T any](value T) Nullable[T] {
	return Nullable[T]{Val: value, Valid: true}
}

// UnmarshalJSON implements the json.Unmarshaler interface for Nullable, allowing it to be used as a nullable field in JSON operations.
// This method ensures proper unmarshalling of JSON data into the Nullable value, correctly setting the Valid flag based on the JSON data.
func (n *Nullable[T]) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Valid = false
		return nil
	}

	var value T
	if err := jsonv2.Unmarshal(data, &value); err != nil {
		return err
	}

	n.Val = value
	n.Valid = true
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Nullable, enabling it to be used as a nullable field in JSON operations.
// This method ensures proper marshalling of Nullable values into JSON data, representing unset values as null in the serialized output.
func (n Nullable[T]) MarshalJSON() ([]byte, error) {
	if !n.Valid {
		return []byte("null"), nil
	}

	return jsonv2.Marshal(n.Val)
}

type Optional[T any] struct {
	Val     T
	Defined bool
}

func (o Optional[T]) IsZero() bool {
	return !o.Defined
}

func NewOptional[T any](value T) Optional[T] {
	return Optional[T]{Val: value, Defined: true}
}

func (o *Optional[T]) UnmarshalJSON(data []byte) error {
	var value T
	if err := jsonv2.Unmarshal(data, &value); err != nil {
		return err
	}

	o.Val = value
	o.Defined = true
	return nil
}

func (o Optional[T]) MarshalJSON() ([]byte, error) {
	return jsonv2.Marshal(o.Val)
}

type MappedNullable interface {
	ToMap() (map[string]interface{}, error)
}
